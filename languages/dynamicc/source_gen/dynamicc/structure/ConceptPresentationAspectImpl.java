package dynamicc.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Assignment;
  private ConceptPresentation props_CCodeBlock;
  private ConceptPresentation props_Cast;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_Function;
  private ConceptPresentation props_FunctionParameter;
  private ConceptPresentation props_Int10LiteralConcept;
  private ConceptPresentation props_Module;
  private ConceptPresentation props_NewlineStatement;
  private ConceptPresentation props_SingleLineComment;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_ValVariable;
  private ConceptPresentation props_VarVariable;
  private ConceptPresentation props_Variable;
  private ConceptPresentation props_VariableAccess;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Assignment:
        if (props_Assignment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("=");
          props_Assignment = cpb.create();
        }
        return props_Assignment;
      case LanguageConceptSwitch.CCodeBlock:
        if (props_CCodeBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("$");
          props_CCodeBlock = cpb.create();
        }
        return props_CCodeBlock;
      case LanguageConceptSwitch.Cast:
        if (props_Cast == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("as");
          props_Cast = cpb.create();
        }
        return props_Cast;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.Function:
        if (props_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Function = cpb.create();
        }
        return props_Function;
      case LanguageConceptSwitch.FunctionParameter:
        if (props_FunctionParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FunctionParameter = cpb.create();
        }
        return props_FunctionParameter;
      case LanguageConceptSwitch.Int10LiteralConcept:
        if (props_Int10LiteralConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Int10LiteralConcept");
          props_Int10LiteralConcept = cpb.create();
        }
        return props_Int10LiteralConcept;
      case LanguageConceptSwitch.Module:
        if (props_Module == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Module = cpb.create();
        }
        return props_Module;
      case LanguageConceptSwitch.NewlineStatement:
        if (props_NewlineStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NewlineStatement");
          props_NewlineStatement = cpb.create();
        }
        return props_NewlineStatement;
      case LanguageConceptSwitch.SingleLineComment:
        if (props_SingleLineComment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_SingleLineComment = cpb.create();
        }
        return props_SingleLineComment;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.ValVariable:
        if (props_ValVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ValVariable = cpb.create();
        }
        return props_ValVariable;
      case LanguageConceptSwitch.VarVariable:
        if (props_VarVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VarVariable = cpb.create();
        }
        return props_VarVariable;
      case LanguageConceptSwitch.Variable:
        if (props_Variable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Variable = cpb.create();
        }
        return props_Variable;
      case LanguageConceptSwitch.VariableAccess:
        if (props_VariableAccess == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xa6d9727f49824bf8L, 0xabdd083fea5126abL, 0x26ea02d22aef02d4L, 0x26ea02d22aef02d5L, "variable", "", "");
          props_VariableAccess = cpb.create();
        }
        return props_VariableAccess;
    }
    return null;
  }
}
