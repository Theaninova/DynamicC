package dynamicc.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Assignment = 0;
  public static final int CCodeBlock = 1;
  public static final int Cast = 2;
  public static final int Expression = 3;
  public static final int Function = 4;
  public static final int FunctionParameter = 5;
  public static final int Int10LiteralConcept = 6;
  public static final int Module = 7;
  public static final int NewlineStatement = 8;
  public static final int SingleLineComment = 9;
  public static final int Statement = 10;
  public static final int Type = 11;
  public static final int ValVariable = 12;
  public static final int VarVariable = 13;
  public static final int Variable = 14;
  public static final int VariableAccess = 15;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xa6d9727f49824bf8L, 0xabdd083fea5126abL);
    builder.put(0x26ea02d22aedd030L, Assignment);
    builder.put(0x26ea02d22ae8452fL, CCodeBlock);
    builder.put(0x26ea02d22aedb9e6L, Cast);
    builder.put(0x3a6fd2de0c382b34L, Expression);
    builder.put(0x26ea02d22ae503deL, Function);
    builder.put(0x26ea02d22ae503eaL, FunctionParameter);
    builder.put(0x45b716564ae56561L, Int10LiteralConcept);
    builder.put(0x3a6fd2de0c312b1dL, Module);
    builder.put(0x3a6fd2de0c342652L, NewlineStatement);
    builder.put(0x26ea02d22af0da98L, SingleLineComment);
    builder.put(0x3a6fd2de0c312b1bL, Statement);
    builder.put(0x3a6fd2de0c335c33L, Type);
    builder.put(0x3a6fd2de0c36cfdaL, ValVariable);
    builder.put(0x3a6fd2de0c345a7bL, VarVariable);
    builder.put(0x3a6fd2de0c335c2eL, Variable);
    builder.put(0x26ea02d22aef02d4L, VariableAccess);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
